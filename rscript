## Caching the Inverse of a Matrix:
## Matrix inversion is Matrix inversion is usually a costly computation 
## and there may be some benefit to caching the inverse of a matrix rather than computing it repeatedly 


## Below funtion is to cache the inverse of a matrix.

makeCacheMatrix <- function(x = matrix()) {
            inv<-NULL
            set<- function(y){
                  x <<- y
                  inv <<-NULL
            }
            get <- function() x
            setInverse <- function(inverse) inv <<- inverse
            getInverse <- function() inv
            list( set = set, get = get,
                  setInverse = setInverse,
                  getInverse = getInverse)
s
}


## This function computes the inverse of the special "matrix" created by 
## makeCacheMatrix above. If the inverse has already been calculated (and the 
## matrix has not changed), then it should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        m <- x$getInverse()
        if(!is.null(inv)){
                message("getting cached data")
                return(inv)
        }
        mat <- x$get()
        inv <- solve(mat,...)
        x$setInverse(inv)
        inv
        ## Return a matrix that is the inverse of 'x'
}
